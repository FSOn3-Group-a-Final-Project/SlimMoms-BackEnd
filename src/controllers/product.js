import Product from "../db/models/product.js";
import DiaryEntry from '../db/models/diaryEntry.js';





// TEST ÃœRÃœNÃœ EKLEME - BÄ°R KERELÄ°K 


const insertTestProductIfEmpty = async () => {
  const existing = await Product.findOne({ title: "PirinÃ§" });
  if (!existing) {
    const created = await Product.create({
      categories: 'grain',
      weight: 100,
      title: 'PirinÃ§',
      calories: 360,
      groupBloodNotAllowed: [false, true, false, true],
    });
    console.log("ğŸŸ¢ Test Ã¼rÃ¼nÃ¼ oluÅŸturuldu:", created._id.toString());
  } else {
    console.log("ğŸŸ¡ 'PirinÃ§' Ã¼rÃ¼nÃ¼ zaten mevcut:", existing._id.toString());
  }
};
// TEST ÃœRÃœNÃœ EKLEME - BÄ°R KERELÄ°K 






export const getFilteredProducts = async (req,res) => {
    try {
        const {search} = req.query;
        let products;
        if(search){
            //search paramateresi varsa title a gÃ¶re filtrele (case-insensitive) RegExp,  metin arama ve eÅŸleÅŸtirme iÅŸlemleri yapmak iÃ§in 
            const regex = new RegExp(search,'i'); // i -> case insensitive (kÃ¼Ã§Ã¼k-bÃ¼yÃ¼k harf farkÄ± olmadan arama yapÄ±lmasÄ± iÃ§in)
            products = await Product.find({title:{$regex:regex}});
        }else {
            // parametre yoksa tÃ¼m Ã¼rÃ¼nleri getir
            products= await Product.find();
        }
         res.status(200).json(products);
    } catch (error) {
        console.error('ÃœrÃ¼n arama hatasÄ±:', error.message);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
    }
};



export const addProductToDiary = async (req, res) => {
  try {


     // â¬‡GEÃ‡Ä°CÄ°: test Ã¼rÃ¼nÃ¼ ekleme (sadece ilk Ã§alÄ±ÅŸtÄ±rmada)
    await insertTestProductIfEmpty();


    const userId = req.user.id;
    const { productId, date, weight } = req.body;

    //test iÃ§in
    let product;
try {
  product = await Product.findById(productId);
  if (!product) return res.status(404).json({ message: 'ÃœrÃ¼n bulunamadÄ±!' });
} catch (err) {
  return res.status(400).json({ message: 'GeÃ§ersiz Ã¼rÃ¼n ID' });
}
// test biten kod


    // const product = await Product.findById(productId);
    // if (!product) return res.status(404).json({ message: 'ÃœrÃ¼n bulunamadÄ±!' });

    let diary = await DiaryEntry.findOne({ user: userId, date });

    if (!diary) {
      diary = new DiaryEntry({
        user: userId,
        date,
        products: [{ product: productId, weight }],
      });
    } else {
      diary.products.push({ product: productId, weight });
    }

    await diary.save();
    res.status(200).json({message: "ÃœrÃ¼n baÅŸarÄ± ile eklendi",diary} );
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
  }
};

export const removeProductFromDiary = async (req, res) => {
  try {
    const { date, productId } = req.params;
    const userId = req.user.id;

    const diary = await DiaryEntry.findOne({ user: userId, date });
    if (!diary) {
      return res.status(404).json({ message: 'GÃ¼nlÃ¼k kaydÄ± bulunamadÄ±' });
    }

    // Ã¼rÃ¼n listeden siliniyor
    diary.products = diary.products.filter(
      (item) => item.product.toString() !== productId,
    );

    await diary.save();
    res.status(200).json({ message: 'ÃœrÃ¼n silindi', diary });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
  }
};

export const getDiaryByDate = async (req, res) => {
  try {
    const { date } = req.params;
    const userId = req.user.id;

    const diary = await DiaryEntry.findOne({ user: userId, date }).populate(
      'products.product',
    ); // Ã¼rÃ¼n detaylarÄ±

    if (!diary) {
      return res.status(404).json({ message: 'GÃ¼nlÃ¼k bulunamadÄ±' });
    }

    res.status(200).json(diary);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
  }
};
